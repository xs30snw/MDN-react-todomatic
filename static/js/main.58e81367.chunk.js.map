{"version":3,"sources":["components/Todo.js","components/Form.js","components/FilterButton.js","App.js","index.js"],"names":["Todo","props","useState","isEditing","setEditing","wasEditing","value","ref","useRef","useEffect","current","usePrevious","newName","setNewName","editFieldRef","editButtonRef","editingTemplate","className","onSubmit","e","preventDefault","editTask","id","htmlFor","name","type","onChange","target","onClick","viewTemplate","defaultChecked","completed","toggleTaskCompleted","deleteTask","focus","Form","setName","addTask","autoComplete","FilterButton","isPressed","setFilter","FILTER_MAP","All","Active","task","Completed","FILTER_NAMES","Object","keys","App","tasks","setTasks","filter","taskList","map","filterList","updatedTasks","editedTaskList","remainingTasks","tasksNoun","length","headingText","listHeadingRef","prevTaskLength","newTask","nanoid","tabIndex","ReactDOM","render","document","getElementById"],"mappings":"mOAUe,SAASA,EAAKC,GACzB,MAAgCC,oBAAS,GAAzC,mBAAOC,EAAP,KAAkBC,EAAlB,KACMC,EAVV,SAAqBC,GACjB,IAAMC,EAAMC,mBAIZ,OAHAC,qBAAU,WACNF,EAAIG,QAAUJ,KAEXC,EAAIG,QAKQC,CAAYR,GAC/B,EAA8BD,mBAAS,IAAvC,mBAAOU,EAAP,KAAgBC,EAAhB,KACMC,EAAeN,iBAAO,MACtBO,EAAgBP,iBAAO,MAc7B,IAAMQ,EACF,uBAAMC,UAAU,cAAcC,SARlC,SAAsBC,GAClBA,EAAEC,iBACFnB,EAAMoB,SAASpB,EAAMqB,GAAIV,GACzBC,EAAW,IACXT,GAAW,IAIX,UACI,sBAAKa,UAAU,aAAf,UACI,wBAAOA,UAAU,aAAaM,QAAStB,EAAMqB,GAA7C,0BACkBrB,EAAMuB,QAExB,uBACIF,GAAIrB,EAAMqB,GACVL,UAAU,YACVQ,KAAK,OACLnB,MAAOM,EACPc,SAtBhB,SAAsBP,GAClBN,EAAWM,EAAEQ,OAAOrB,QAsBRC,IAAKO,OAGb,sBAAKG,UAAU,YAAf,UACI,yBACIQ,KAAK,SACLR,UAAU,kBACVW,QAAS,kBAAMxB,GAAW,IAH9B,mBAMI,uBAAMa,UAAU,kBAAhB,sBAA4ChB,EAAMuB,WAEtD,yBAAQC,KAAK,SAASR,UAAU,6BAAhC,iBAEI,uBAAMA,UAAU,kBAAhB,0BAAgDhB,EAAMuB,iBAKhEK,EACF,sBAAKZ,UAAU,cAAf,UACI,sBAAKA,UAAU,OAAf,UACI,uBACIK,GAAIrB,EAAMqB,GACVG,KAAK,WACLK,eAAgB7B,EAAM8B,UACtBL,SAAU,kBAAMzB,EAAM+B,oBAAoB/B,EAAMqB,OAEpD,uBAAOL,UAAU,aAAaM,QAAStB,EAAMqB,GAA7C,SACKrB,EAAMuB,UAGf,sBAAKP,UAAU,YAAf,UACI,yBACIQ,KAAK,SACLR,UAAU,MACVW,QAAS,kBAAMxB,GAAW,IAC1BG,IAAKQ,EAJT,kBAMS,sBAAME,UAAU,kBAAhB,SAAmChB,EAAMuB,UAElD,yBACIC,KAAK,SACLR,UAAU,kBACVW,QAAS,kBAAM3B,EAAMgC,WAAWhC,EAAMqB,KAH1C,oBAKW,sBAAML,UAAU,kBAAhB,SAAmChB,EAAMuB,gBAiBhE,OAXAf,qBAAU,YACDJ,GAAcF,GACfW,EAAaJ,QAAQwB,QAErB7B,IAAeF,GACfY,EAAcL,QAAQwB,UAEzB,CAAC7B,EAAYF,IAIX,oBAAIc,UAAU,OAAd,SAAsBd,EAAYa,EAAkBa,IClEhDM,MApCf,SAAclC,GACV,MAAwBC,mBAAS,IAAjC,mBAAOsB,EAAP,KAAaY,EAAb,KAYA,OACI,uBAAMlB,SAPV,SAAsBC,GAClBA,EAAEC,iBACFnB,EAAMoC,QAAQb,GACdY,EAAQ,KAIR,UACI,oBAAInB,UAAU,gBAAd,SACI,uBAAOM,QAAQ,iBAAiBN,UAAU,YAA1C,sCAIJ,uBACIQ,KAAK,OACLH,GAAG,iBACHL,UAAU,kBACVO,KAAK,OACLc,aAAa,MACbhC,MAAOkB,EACPE,SAxBZ,SAAsBP,GAClBiB,EAAQjB,EAAEQ,OAAOrB,UAyBb,wBAAQmB,KAAK,SAASR,UAAU,2BAAhC,qBCdGsB,MAff,SAAsBtC,GAClB,OACI,yBACIwB,KAAK,SACLR,UAAU,iBACV,eAAchB,EAAMuC,UACpBZ,QAAS,kBAAM3B,EAAMwC,UAAUxC,EAAMuB,OAJzC,UAMI,sBAAMP,UAAU,kBAAhB,mBACA,+BAAOhB,EAAMuB,OACb,sBAAMP,UAAU,kBAAhB,wBCNNyB,EAAa,CACfC,IAAK,kBAAM,GACXC,OAAQ,SAAAC,GAAI,OAAKA,EAAKd,WACtBe,UAAW,SAAAD,GAAI,OAAIA,EAAKd,YAEtBgB,EAAeC,OAAOC,KAAKP,GAsGlBQ,MA5Ff,SAAajD,GACT,MAA0BC,mBAASD,EAAMkD,OAAzC,mBAAOA,EAAP,KAAcC,EAAd,KACA,EAA4BlD,mBAAS,OAArC,mBAAOmD,EAAP,KAAeZ,EAAf,KAEMa,EAAWH,EACZE,OAAOX,EAAWW,IAClBE,KAAI,SAAAV,GAAI,OACL,cAAC7C,EAAD,CACEsB,GAAIuB,EAAKvB,GACTE,KAAMqB,EAAKrB,KACXO,UAAWc,EAAKd,UAEhBC,oBAAqBA,EACrBC,WAAYA,EACZZ,SAAUA,GAHLwB,EAAKvB,OAOdkC,EAAaT,EAAaQ,KAAI,SAAA/B,GAAI,OACpC,cAAC,EAAD,CAEEA,KAAMA,EACNgB,UAAWhB,IAAS6B,EACpBZ,UAAWA,GAHNjB,MAYX,SAASQ,EAAoBV,GAEzB,IAAMmC,EAAeN,EAAMI,KAAI,SAAAV,GAE3B,OAAIvB,IAAOuB,EAAKvB,GAGL,2BAAIuB,GAAX,IAAiBd,WAAYc,EAAKd,YAE/Bc,KAEXO,EAASK,GAGb,SAASpC,EAASC,EAAIV,GAClB,IAAM8C,EAAiBP,EAAMI,KAAI,SAAAV,GAE7B,OAAIvB,IAAOuB,EAAKvB,GACP,2BAAIuB,GAAX,IAAiBrB,KAAMZ,IAElBiC,KAEXO,EAASM,GAGb,SAASzB,EAAWX,GAChB,IAAMqC,EAAiBR,EAAME,QAAO,SAAAR,GAAI,OAAIvB,IAAOuB,EAAKvB,MACxD8B,EAASO,GAGb,IAAMC,EAAgC,IAApBN,EAASO,OAAe,QAAU,OAC9CC,EAAW,UAAMR,EAASO,OAAf,YAAyBD,EAAzB,cACXG,EAAiBvD,iBAAO,MACxBwD,EAzEV,SAAqB1D,GACjB,IAAMC,EAAMC,mBAIZ,OAHAC,qBAAU,WACNF,EAAIG,QAAUJ,KAEXC,EAAIG,QAoEYC,CAAYwC,EAAMU,QAOzC,OANApD,qBAAU,WACF0C,EAAMU,OAASG,KAAoB,GACrCD,EAAerD,QAAQwB,UAE1B,CAACiB,EAAMU,OAAQG,IAGd,sBAAK/C,UAAU,sBAAf,UACI,2CACA,cAAC,EAAD,CAAMoB,QAhDd,SAAiBb,GACb,IAAMyC,EAAU,CAAE3C,GAAI,QAAU4C,cAAU1C,KAAMA,EAAMO,WAAW,GACjEqB,EAAS,GAAD,mBAAKD,GAAL,CAAYc,QA+ChB,qBAAKhD,UAAU,oCAAf,SACKuC,IAEL,oBAAIlC,GAAG,eAAe6C,SAAS,KAAK5D,IAAKwD,EAAzC,SACKD,IAEL,oBACI7C,UAAU,wCACV,kBAAgB,eAFpB,SAIKqC,QChGjBc,IAASC,OACL,cAAC,EAAD,CAAKlB,MAPI,CACT,CAAE7B,GAAI,SAAUE,KAAM,MAAOO,WAAW,GACxC,CAAET,GAAI,SAAUE,KAAM,QAASO,WAAW,GAC1C,CAAET,GAAI,SAAUE,KAAM,SAAUO,WAAW,MAK3CuC,SAASC,eAAe,W","file":"static/js/main.58e81367.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\n\r\nfunction usePrevious(value) {\r\n    const ref = useRef();\r\n    useEffect(() => {\r\n        ref.current = value;\r\n    });\r\n    return ref.current;\r\n  }\r\n\r\nexport default function Todo(props) {\r\n    const [isEditing, setEditing] = useState(false);\r\n    const wasEditing = usePrevious(isEditing);\r\n    const [newName, setNewName] = useState('');\r\n    const editFieldRef = useRef(null);\r\n    const editButtonRef = useRef(null);\r\n\r\n\r\n    function handleChange(e) {\r\n        setNewName(e.target.value);\r\n    }\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n        props.editTask(props.id, newName);\r\n        setNewName(\"\");\r\n        setEditing(false);\r\n    }\r\n      \r\n    const editingTemplate = (\r\n        <form className=\"stack-small\" onSubmit={handleSubmit}>\r\n            <div className=\"form-group\">\r\n                <label className=\"todo-label\" htmlFor={props.id}>\r\n                    New name for {props.name}\r\n                </label>\r\n                <input \r\n                    id={props.id} \r\n                    className=\"todo-text\" \r\n                    type=\"text\" \r\n                    value={newName}\r\n                    onChange={handleChange}\r\n                    ref={editFieldRef}\r\n                />\r\n            </div>\r\n            <div className=\"btn-group\">\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"btn todo-cancel\"\r\n                    onClick={() => setEditing(false)}\r\n                >\r\n                    Cancel\r\n                    <span className=\"visually-hidden\">renaming {props.name}</span>\r\n                </button>\r\n                <button type=\"submit\" className=\"btn btn__primary todo-edit\">\r\n                    Save\r\n                    <span className=\"visually-hidden\">new name for {props.name}</span>\r\n                </button>\r\n            </div>\r\n        </form>\r\n    );\r\n    const viewTemplate = (\r\n        <div className=\"stack-small\">\r\n            <div className=\"c-cb\">\r\n                <input\r\n                    id={props.id}\r\n                    type=\"checkbox\"\r\n                    defaultChecked={props.completed}\r\n                    onChange={() => props.toggleTaskCompleted(props.id)}\r\n                />\r\n                <label className=\"todo-label\" htmlFor={props.id}>\r\n                    {props.name}\r\n                </label>\r\n            </div>\r\n            <div className=\"btn-group\">\r\n                <button\r\n                    type=\"button\" \r\n                    className=\"btn\" \r\n                    onClick={() => setEditing(true)}\r\n                    ref={editButtonRef}\r\n                >\r\n                    Edit <span className=\"visually-hidden\">{props.name}</span>\r\n                </button>\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"btn btn__danger\"\r\n                    onClick={() => props.deleteTask(props.id)}\r\n                >\r\n                    Delete <span className=\"visually-hidden\">{props.name}</span>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n    \r\n    useEffect(() => {\r\n        if (!wasEditing && isEditing) {\r\n            editFieldRef.current.focus();\r\n        }\r\n        if (wasEditing && !isEditing) {\r\n            editButtonRef.current.focus();\r\n        }\r\n      }, [wasEditing, isEditing]);\r\n      \r\n      \r\n          \r\n    return <li className=\"todo\">{isEditing ? editingTemplate : viewTemplate}</li>;\r\n}\r\n  ","import React, { useState } from \"react\";\r\n\r\nfunction Form(props) {\r\n    const [name, setName] = useState('');\r\n\r\n    function handleChange(e) {\r\n        setName(e.target.value);\r\n    }\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n        props.addTask(name);\r\n        setName(\"\");\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <h2 className=\"label-wrapper\">\r\n                <label htmlFor=\"new-todo-input\" className=\"label__lg\">\r\n                What needs to be done?\r\n                </label>\r\n            </h2>\r\n            <input\r\n                type=\"text\"\r\n                id=\"new-todo-input\"\r\n                className=\"input input__lg\"\r\n                name=\"text\"\r\n                autoComplete=\"off\"\r\n                value={name}\r\n                onChange={handleChange}\r\n            />\r\n            <button type=\"submit\" className=\"btn btn__primary btn__lg\">\r\n                Add\r\n            </button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form\r\n","import React from 'react'\r\n\r\nfunction FilterButton(props) {\r\n    return (\r\n        <button\r\n            type=\"button\"\r\n            className=\"btn toggle-btn\"\r\n            aria-pressed={props.isPressed}\r\n            onClick={() => props.setFilter(props.name)}\r\n        >\r\n            <span className=\"visually-hidden\">Show </span>\r\n            <span>{props.name}</span>\r\n            <span className=\"visually-hidden\"> tasks</span>\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default FilterButton","import React, { useState, useRef, useEffect } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport Todo from \"./components/Todo\";\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\n\nconst FILTER_MAP = {\n    All: () => true,\n    Active: task => !task.completed,\n    Completed: task => task.completed\n};\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n\nfunction usePrevious(value) {\n    const ref = useRef();\n    useEffect(() => {\n        ref.current = value;\n    });\n    return ref.current;\n}\n\nfunction App(props) {\n    const [tasks, setTasks] = useState(props.tasks);\n    const [filter, setFilter] = useState('All');\n\n    const taskList = tasks\n        .filter(FILTER_MAP[filter])\n        .map(task => (\n            <Todo\n              id={task.id}\n              name={task.name}\n              completed={task.completed}\n              key={task.id}\n              toggleTaskCompleted={toggleTaskCompleted}\n              deleteTask={deleteTask}\n              editTask={editTask}\n            />\n    ));\n\n    const filterList = FILTER_NAMES.map(name => (\n        <FilterButton\n          key={name}\n          name={name}\n          isPressed={name === filter}\n          setFilter={setFilter}\n        />\n    ));\n  \n    function addTask(name) {\n        const newTask = { id: \"todo-\" + nanoid(), name: name, completed: false };\n        setTasks([...tasks, newTask]);\n    }\n\n    function toggleTaskCompleted(id) {\n        // console.log(tasks[0])\n        const updatedTasks = tasks.map(task => {\n            // if this task has the same ID as the edited task\n            if (id === task.id) {\n                // use object spread to make a new object\n                // whose `completed` prop has been inverted\n                return {...task, completed: !task.completed}\n            }\n            return task;\n        });\n        setTasks(updatedTasks);\n    }\n\n    function editTask(id, newName) {\n        const editedTaskList = tasks.map(task => {\n        // if this task has the same ID as the edited task\n            if (id === task.id) {\n              return {...task, name: newName}\n            }\n            return task;\n        });\n        setTasks(editedTaskList);\n    }\n\n    function deleteTask(id) {\n        const remainingTasks = tasks.filter(task => id !== task.id);\n        setTasks(remainingTasks);\n    }\n\n    const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\n    const headingText = `${taskList.length} ${tasksNoun} remaining`;\n    const listHeadingRef = useRef(null);\n    const prevTaskLength = usePrevious(tasks.length);\n    useEffect(() => {\n        if (tasks.length - prevTaskLength === -1) {\n          listHeadingRef.current.focus();\n        }\n    }, [tasks.length, prevTaskLength]);\n  \n    return (\n        <div className=\"todoapp stack-large\">\n            <h1>TodoMatic</h1>\n            <Form addTask={addTask} />\n            <div className=\"filters btn-group stack-exception\">\n                {filterList}\n            </div>\n            <h2 id=\"list-heading\" tabIndex=\"-1\" ref={listHeadingRef}>\n                {headingText}\n            </h2>\n            <ul\n                className=\"todo-list stack-large stack-exception\"\n                aria-labelledby=\"list-heading\"\n            >\n                {taskList}\n            </ul>\n        </div>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nconst DATA = [\n    { id: \"todo-0\", name: \"Eat\", completed: true },\n    { id: \"todo-1\", name: \"Sleep\", completed: false },\n    { id: \"todo-2\", name: \"Repeat\", completed: false }\n];\n\nReactDOM.render(\n    <App tasks={DATA} />,\n    document.getElementById('root')\n);"],"sourceRoot":""}